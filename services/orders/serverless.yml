service: marketplace-orders-service
frameworkVersion: '3'
useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  httpApi:
    cors: true
    authorizers:
      authenticationRequired:
        type: request
        functionArn: !ImportValue ${self:custom.authorizerFunction.exportName}
  iamRoleStatements:
    - Effect: Allow
      Action:
      - dynamodb:PutItem
      Resource:
        - ${self:custom.ordersTable.arn}
  environment:
    ORDERS_TABLE_NAME: ${self:custom.ordersTable.name}

functions:
  createOrder:
    handler: ./dist/handlers/createOrder.handler
    events:
      - eventBridge:
          eventBus: !Ref ordersEventBus
          pattern:
            detail:
              type:
                - CREATE_ORDER
resources:
  Resources:
    ordersEventBus: ${file('./resources/eventbridge/ordersEventBus.yml'):ordersEventBus}
    ordersTable: ${file('./resources/dynamodb/ordersTable.yml'):ordersTable}
  Outputs:
    OrdersEventBusArn:
      Value: !GetAtt ordersEventBus.Arn
      Export:
          Name: "orders-event-bus-arn"

plugins:
  - serverless-plugin-monorepo

package: 
    exclude: 
      - src/**/*.ts 
      - node_modules/.bin/** 
      - '*.json'

custom:
  authorizerFunction:
    exportName:
      Fn::Join:
        - "-"
        - - 'sls-marketplace-auth-service'
          - ${opt:stage, 'dev'}
          - 'AuthorizerLambdaFunctionQualifiedArn'

  ordersTable:
    name: ${env:ORDERS_TABLE_NAME}
    arn: !GetAtt ordersTable.Arn
